---
- name: Create {{ bin_dir }}
  file:
    path: "{{ bin_dir }}"
    state: directory

- name: Check if OpenShift installer is already installed
  stat:
    path: "{{ openshift_install }}"
  register: openshift_install_stat

- name: Check OpenShift installer version
  shell: "{{ openshift_install }} version | awk '/openshift-install/ {print $2}'"
  changed_when: false
  failed_when: false
  register: openshift_install_version
  when: openshift_install_stat.stat.exists

- name: Download OpenShift installer {{ openshift_version }}
  unarchive:
    src: "{{ openshift_install_url }}"
    remote_src: yes
    dest: "{{ bin_dir }}"
    mode: '755'
    exclude:
    - README.md
  when: (not openshift_install_stat.stat.exists) or (not openshift_install_version.stdout == openshift_version)

- name: Check if OpenShift client is already installed
  stat:
    path: "{{ oc }}"
  register: openshift_client_stat

- name: Check OpenShift client version
  shell: "{{ oc }} version --client | awk '{print $3}'"
  changed_when: false
  failed_when: false
  register: openshift_client_version
  when: openshift_client_stat.stat.exists

- name: Download OpenShift client {{ openshift_version }}
  unarchive:
    src: "{{ openshift_cli_url }}"
    remote_src: yes
    dest: "{{ bin_dir }}"
    mode: '755'
    exclude:
    - README.md
  when: (not openshift_client_stat.stat.exists) or (not openshift_client_version.stdout == openshift_version)

- name: Create installation directory
  file:
    path: "{{ install_dir }}"
    state: directory

- name: Create install-config.yaml file
  template:
    src: install-config.yaml.j2
    dest: "{{ install_dir }}/install-config.yaml"
  no_log: true

- name: Show log location
  debug:
    msg: "Run 'tail -f {{ install_log }}' on a second terminal to follow installation progress"

- name: Run OpenShift installer
  shell: "{{ openshift_install }} create cluster --dir={{ install_dir }} --log-level=debug 2>&1 | tee {{ install_log}}"

- name: Make sure installation completed successfully
  command: "{{ openshift_install }} wait-for install-complete --dir={{ install_dir }}"

